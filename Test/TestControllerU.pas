unit TestControllerU;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, DB, Dialogs, ControllerU, Controls, dmConnectionU, Forms, SysUtils,
  OleCtrls, ComCtrls, Grids, ADODB, StdCtrls, frmClaimU, frmClaimEditU, Rtti;

type
  // Test methods for class TDataManipulations

  TestTDataManipulations = class(TTestCase)
  strict private
    FDataManipulations: TDataManipulations;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestUpdateRecord;
    procedure TestDeleteRecord;
    procedure TestRefreshGrid;
  end;
  // Test methods for class TValidates

  TestTValidates = class(TTestCase)
  strict private
    FValidates: TValidates;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestValidateYear;
    procedure TestValidateDigits;
    procedure TestValidateDecimal;
    procedure TestValidateGrossClaim;
    procedure TestValidateDiff;
    procedure TestValidateEmpty;
    procedure TestValidateComboBox;
  end;
  // Test methods for class TFillingUpControls

  TestTFillingUpControls = class(TTestCase)
  strict private
    FFillingUpControls: TFillingUpControls;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestFillUpComboBox;
  end;

implementation

procedure TestTDataManipulations.SetUp;
begin
  FDataManipulations := TDataManipulations.Create;
end;

procedure TestTDataManipulations.TearDown;
begin
  FDataManipulations.Free;
  FDataManipulations := nil;
end;

procedure TestTDataManipulations.TestRefreshGrid;
var
  rttiContext: TRttiContext;
begin
  frmClaim := TfrmClaim.Create(nil);
  frmClaim.Show;

  Dmls := TDataManipulations.Create;
  Dmls.Lr := 0;

  rttiContext := TRttiContext.Create;
  rttiContext.GetType(TDataManipulations).GetMethod('RefreshGrid').Invoke(Dmls, [frmClaim.grdMain]);

  dmConnection.qClaim.Active := True;
  CheckEquals(dmConnection.qClaim.RecordCount, frmClaim.grdMain.RowCount-1, 'StringGrid filling failed! Record count of the Dataset differs from the Row count of the Grid.');

  dmConnection.qClaim.Active := False;
  frmClaim.Free;
end;

procedure TestTDataManipulations.TestUpdateRecord;
var
  ReturnValue: Boolean;
  Deductible: Double;
  GrossClaim: Double;
  TypeID: Integer;
  _Name: string;
  Year: Integer;
  ID: Integer;
begin
  Deductible := 10.33;
  GrossClaim := 10000.66;
  TypeID := 2;
  _Name := 'Test Claim Insert';
  Year:= 2010;
  ID := -1;
  ReturnValue := FDataManipulations.UpdateRecord(ID, Year, _Name, TypeID, GrossClaim, Deductible);
  CheckEquals(True, ReturnValue, 'The record haven''t been inserted');

  Deductible := 10.33;
  GrossClaim := 10000.66;
  TypeID := 2;
  _Name := 'Test Claim Update';
  Year:= 2015;
  ID := 0;
  ReturnValue := FDataManipulations.UpdateRecord(ID, Year, _Name, TypeID, GrossClaim, Deductible);
  CheckEquals(True, ReturnValue, 'The record haven''t been updated');

end;

procedure TestTDataManipulations.TestDeleteRecord;
var
  ReturnValue: Boolean;
  Name: string;
  ID: Integer;
begin
  Name := 'Test Claim';
  ID := 0;
  ReturnValue := FDataManipulations.DeleteRecord(ID, Name);
  CheckEquals(True, ReturnValue, 'Delete test failed! Although OK button was pressed');

  Name := 'Test Claim';
  ID := 0;
  ReturnValue := FDataManipulations.DeleteRecord(ID, Name);
  CheckEquals(False, ReturnValue, 'Delete cancel test failed! Although Cancel button was pressed');
end;

procedure TestTValidates.SetUp;
begin
  FValidates := TValidates.Create;
end;

procedure TestTValidates.TearDown;
begin
  FValidates.Free;
  FValidates := nil;
end;

procedure TestTValidates.TestValidateYear;
var
  ReturnValue: Boolean;
  dtpControl: TDateTimePicker;
begin
  frmClaimEdit := TfrmClaimEdit.Create(nil);
  frmClaimEdit.OnShow := nil;
  frmClaimEdit.OnCloseQuery := nil;
  frmClaimEdit.Show;

  dtpControl := frmClaimEdit.dtpYear;
  dtpControl.Date := StrToDate('01.01.2099');
  dtpControl.OnExit := nil;
  dtpControl.OnChange := nil;
  try
    ReturnValue := FValidates.ValidateYear(dtpControl);
  except
  end;
  CheckEquals(False, ReturnValue, 'The Validation of the Year failed! Can''t be in the future.');

  dtpControl.Date := StrToDate('01.01.2001');
  try
    ReturnValue := FValidates.ValidateYear(dtpControl);
  except
  end;
  CheckEquals(False, ReturnValue, 'The Validation of the Year failed! Can''t be more than 10 years back.');

  dtpControl.Date := StrToDate('01.01.2015');
  try
    ReturnValue := FValidates.ValidateYear(dtpControl);
  except
  end;
  CheckEquals(True, ReturnValue, 'The Validation of the Year failed! Year is in Range.');

  frmClaimEdit.Close;
end;

procedure TestTValidates.TestValidateDigits;
var
  ReturnValue: Boolean;
  Key: Char;
begin
  Key := #57;
  ReturnValue := FValidates.ValidateDigits(Key);
  CheckEquals(True, ReturnValue, 'Digits validation failed! Key is "9"');

  Key := #87;
  ReturnValue := FValidates.ValidateDigits(Key);
  CheckEquals(False, ReturnValue, 'Digits validation failed! Key is "w"');
end;

procedure TestTValidates.TestValidateDecimal;
var
  ReturnValue: Boolean;
  edtControl: TEdit;
begin
  frmClaimEdit := TfrmClaimEdit.Create(nil);
  frmClaimEdit.OnShow := nil;
  frmClaimEdit.OnCloseQuery := nil;
  frmClaimEdit.Show;

  edtControl := frmClaimEdit.edtGrossClaim;
  edtControl.OnExit := nil;
  edtControl.OnChange := nil;
  edtControl.OnKeyPress := nil;

  edtControl.Text := '10,,6';
  try
    ReturnValue := FValidates.ValidateDecimal(edtControl);
  except
  end;
  CheckEquals(False, ReturnValue, 'Decimal validation failed! Text is "10,,6"');

  edtControl.Text := '10,606';
  try
    ReturnValue := FValidates.ValidateDecimal(edtControl);
  except
  end;
  CheckEquals(True, ReturnValue, 'Decimal validation failed! Text is "10,606"');

  frmClaimEdit.Close;
end;

procedure TestTValidates.TestValidateGrossClaim;
var
  ReturnValue: Boolean;
  edtControl: TEdit;
begin
  frmClaimEdit := TfrmClaimEdit.Create(nil);
  frmClaimEdit.OnShow := nil;
  frmClaimEdit.OnCloseQuery := nil;
  frmClaimEdit.Show;

  edtControl := frmClaimEdit.edtGrossClaim;
  edtControl.OnExit := nil;
  edtControl.OnChange := nil;
  edtControl.OnKeyPress := nil;

  edtControl.Text := '1000000,45';
  try
    ReturnValue := FValidates.ValidateGrossClaim(edtControl);
  except
  end;
  CheckEquals(False, ReturnValue, 'Gross Claim validation failed! Value more than 100000');

  edtControl.Text := '10,606';
  try
    ReturnValue := FValidates.ValidateGrossClaim(edtControl);
  except
  end;
  CheckEquals(True, ReturnValue, 'Gross Claim validation failed! Value less than 100000');

  frmClaimEdit.Close;
end;

procedure TestTValidates.TestValidateDiff;
var
  ReturnValue: Boolean;
  edtControl: TEdit;
begin
  frmClaimEdit := TfrmClaimEdit.Create(nil);
  frmClaimEdit.OnShow := nil;
  frmClaimEdit.OnCloseQuery := nil;
  frmClaimEdit.Show;

  edtControl := frmClaimEdit.edtNetClaim;

  edtControl.Text := '-1000,45';
  try
    ReturnValue := FValidates.ValidateDiff(edtControl);
  except
  end;
  CheckEquals(False, ReturnValue, 'Net Claim validation failed! Value less than 0');

  edtControl.Text := '100,606';
  try
    ReturnValue := FValidates.ValidateDiff(edtControl);
  except
  end;
  CheckEquals(True, ReturnValue, 'Net Claim validation failed! Value more than or equals 0');

  frmClaimEdit.Close;
end;

procedure TestTValidates.TestValidateEmpty;
var
  ReturnValue: Boolean;
  frmControl: TEdit;
begin
  frmClaimEdit := TfrmClaimEdit.Create(nil);
  frmClaimEdit.OnShow := nil;
  frmClaimEdit.OnCloseQuery := nil;
  frmClaimEdit.Show;

  frmControl := frmClaimEdit.edtName;
  frmControl.Text := '';
  try
    ReturnValue := FValidates.ValidateEmpty(frmControl);
  except
  end;
  CheckEquals(False, ReturnValue, 'Emptiness of the Name validation failed! Value is empty');

  frmControl.Text := 'Claim name';
  try
    ReturnValue := FValidates.ValidateEmpty(frmControl);
  except
  end;
  CheckEquals(True, ReturnValue, 'Emptiness of the Name validation failed! Value is not empty');

  frmClaimEdit.Close;
end;

procedure TestTValidates.TestValidateComboBox;
var
  ReturnValue: Boolean;
  cbControl: TComboBox;
begin
  frmClaimEdit := TfrmClaimEdit.Create(nil);
  frmClaimEdit.OnShow := nil;
  frmClaimEdit.OnCloseQuery := nil;
  frmClaimEdit.Show;

  cbControl := frmClaimEdit.cbTypeName;
  FlCtrl.cbControl := cbControl;
  cbControl.ItemIndex := -1;
  cbControl.Text := 'VVV';

  try
    ReturnValue := FValidates.ValidateComboBox(cbControl);
  except
  end;
  CheckEquals(False, ReturnValue, 'Combobox validation failed! Value is not in list');

  cbControl.ItemIndex := 0;
  cbControl.Text := 'Collision';

  try
    ReturnValue := FValidates.ValidateComboBox(cbControl);
  except
  end;
  CheckEquals(True, ReturnValue, 'Combobox validation failed! Value is in list');

  frmClaimEdit.Close;
end;

procedure TestTFillingUpControls.SetUp;
begin
  FFillingUpControls := TFillingUpControls.Create;
end;

procedure TestTFillingUpControls.TearDown;
begin
  FFillingUpControls.Free;
  FFillingUpControls := nil;
end;

procedure TestTFillingUpControls.TestFillUpComboBox;
begin
  frmClaimEdit := TfrmClaimEdit.Create(nil);
  frmClaimEdit.OnShow := nil;
  frmClaimEdit.OnCloseQuery := nil;
  frmClaimEdit.Show;

  FlCtrl.cbControl := frmClaimEdit.cbTypeName;

  dmConnection.qClaimType.Active := True;
  CheckEquals(dmConnection.qClaimType.RecordCount, frmClaimEdit.cbTypeName.Items.Count, 'Combobox filling failed! Record count of the Dataset differs from the Items count of the Combobox.');

  dmConnection.qClaimType.Active := False;
  frmClaimEdit.Free;
end;


initialization
  // Register any test cases with the test runner
  RegisterTest(TestTDataManipulations.Suite);
  RegisterTest(TestTValidates.Suite);
  RegisterTest(TestTFillingUpControls.Suite);
end.

